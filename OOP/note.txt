访问控制符
    在默认情况下，是public的

封装和抽象
    作用域：
        在class外定义函数
            class内的Year(int y);不能再留{}

            void Date::Year(int y){
                this->year=y;
            }
        
        使用namespace：
            允许程序员将逻辑上相关的变量和函数组合在一起。
            命名空间还有助于避免与在程序的不同部分中具有相同名称的变量之间的冲突

            c++标准库使用的命名空间为std
    
    Initializer list
        允许开发者在创建对象之前为对象里的值赋值

        这使得对const对象可以进行赋值，还能保证赋值之后就不再改变
            class Person{
                public:
                Person(string n);
                string GetName(){
                    return this->name; 
                }
                private:
                string const name;
            };

            Person::Person(string n): name(n){}

            // Test
            int main()
            {
                Person alice("Alice");
                cout<<alice.GetName()<<"\n";
            }
    
    封装（encapsulation）
        在getter函数中使用const关键字
            // accessors
            string Name() const{
                return name_;
            }
            确保用户无法执行任何操作来更改对象的私有属性


抽象
    抽象是指将类的接口与其实现的细节分离。
    该接口提供了一种与对象交互的方法，同时隐藏了类工作原理的详细信息和实现。
        
静态static
    静态成员
        属于整个类，而不是单个对象
        成员只创建一次，然后由类的所有实例（即对象）共享
        如果该类的用户或在类本身的成员函数中更改了该成员，则该类的所有成员将在下次访问该成员时看到该更改

        static const constexpr
    
    静态方法
        在没有实例的情况下使用，可以用于实例化对象

多态和继承
    继承
        访问控制符：
            公共继承：
                在说明符之后列出的基类的公共成员和受保护成员在派生类中保留其成员访问权限
            受保护的继承：
                在说明符之后列出的基类的公共成员和受保护成员是派生类的受保护成员

                子类可以在class内部调用父类的public内容，
                但是不能在class外部使用父类的public内容，
                只能在自己的public方法中调用protected 父类的内容

            私有继承：
                在说明符之后列出的基类的公共成员和受保护成员是派生类的私有成员

                父类的所有成员变成私有内容

    friend
        授予对类的私有成员的访问控制权限

        这为派生类提供了另一种继承机制。
            经典继承和友元继承之间的主要区别在于，类可以访问基类的私有成员，
            而经典继承则不然
        
        经典继承中，派生类只能访问基类的公共成员和受保护成员
    
    多重继承可以合并基类的特性
        diamond problem
            两个父类来自同一个抽象类，当执行功能函数时会发生冲突
    
    模板
        <T>自定义的可以在使用的时候由编译器自动推断，但是vector<int>的<T>不能删除
        在c++17中是vector<int>的<T>可以删除，由编译器自动推断
            



运算符重载：
    按照自己的逻辑分配运算符
    使用operator关键字进行重载

虚函数
    可以用于定义接口
    virtual double Area() const = 0; =0的作用是定义纯虚函数
        不打算在本类中定义 Area函数的作用
        继承这个接口的class必须实现这个函数

    实现类重写的时候需要完全重复纯虚函数的签名
        double Area() const{}
    
    override关键字可以避免未继承的错误（忘记写 “：base class”）
        void Move(double v, double t) override