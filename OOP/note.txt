访问控制符
    在默认情况下，是public的

封装和抽象
    作用域：
        在class外定义函数
            class内的Year(int y);不能再留{}

            void Date::Year(int y){
                this->year=y;
            }
        
        使用namespace：
            允许程序员将逻辑上相关的变量和函数组合在一起。
            命名空间还有助于避免与在程序的不同部分中具有相同名称的变量之间的冲突

            c++标准库使用的命名空间为std
    
    Initializer list
        允许开发者在创建对象之前为对象里的值赋值

        这使得对const对象可以进行赋值，还能保证赋值之后就不再改变
            class Person{
                public:
                Person(string n);
                string GetName(){
                    return this->name; 
                }
                private:
                string const name;
            };

            Person::Person(string n): name(n){}

            // Test
            int main()
            {
                Person alice("Alice");
                cout<<alice.GetName()<<"\n";
            }
    
    封装（encapsulation）
        在getter函数中使用const关键字
            // accessors
            string Name() const{
                return name_;
            }
            确保用户无法执行任何操作来更改对象的私有属性


抽象
    抽象是指将类的接口与其实现的细节分离。
    该接口提供了一种与对象交互的方法，同时隐藏了类工作原理的详细信息和实现。
        
静态static
    静态成员
        属于整个类，而不是单个对象
        成员只创建一次，然后由类的所有实例（即对象）共享
        如果该类的用户或在类本身的成员函数中更改了该成员，则该类的所有成员将在下次访问该成员时看到该更改

        static const constexpr
    
    静态方法
        在没有实例的情况下使用，可以用于实例化对象