A*
    和其他广度优先算法相似，只是多了一个启发函数，用于寻找下一个节点
    算法
        Search( grid, initial_point, goal_point ) :

            1.Initialize an empty list of open nodes.

            2.Initialize a starting node with the following:

                x and y values given by initial_point.
                g = 0, where g is the cost for each move.
                h given by the heuristic function (a function of the current coordinates and the goal).

            3.Add the new node to the list of open nodes.

            4.while the list of open nodes is nonempty:

                1.Sort the open list by f-value
                2.Pop the optimal cell (called the current cell).
                3.Mark the cell's coordinates in the grid as part of the path.
                4.if the current cell is the goal cell:
                return the grid.
                4.else, expand the search to the current node's neighbors. This includes the following steps:
                Check each neighbor cell in the grid to ensure that the cell is empty: it hasn't been closed and is not an obstacle.
                If the cell is empty, compute the cost (g value) and the heuristic, and add to the list of open nodes.
                Mark the cell as closed.
            If you exit the while loop because the list of open nodes is empty, you have run out of new nodes to explore and haven't found a path.

A*算法中每个点是由两个值组成的：g+h
    g值为走过的步数
    h值为启发值

A*利用f值最低的节点作为搜索中的下一个节点

p15
